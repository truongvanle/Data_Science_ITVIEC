import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import joblib
from underthesea import word_tokenize
from wordcloud import WordCloud
from datetime import datetime
from PIL import Image
import os
from  preprocessed import process_text, count_pos_neg_words,classify_sentiment
import nltk
import regex
from underthesea import sentiment, word_tokenize
from nltk import sent_tokenize
from nltk.corpus import stopwords
import emoji
nltk.download('stopwords')

# C·∫•u h√¨nh trang
st.set_page_config(page_title="SENTIMENT ANALYSIS AND INFORMATION CLUSTERING FOR ITVIEC", layout="wide")

# T·∫£i d·ªØ li·ªáu
data = pd.read_csv('final_data.csv')


# Thanh b√™n (Sidebar)
st.sidebar.image("channels4_banner.jpg", use_container_width=True)
st.title("ITVIEC SENTIMENT ANALYSIS AND CLUSTERING")

# Menu
menu = ["Business Objective","Build Project","Sentiment Analysis & Clustering"]
choice = st.sidebar.selectbox('Menu', menu)

st.sidebar.write("""#### üü¢ Th√†nh vi√™n th·ª±c hi·ªán: 
    Tr∆∞∆°ng VƒÉn L√™
    email: truongvanle999@gmail.com
    ƒê√†o Tu·∫•n Th·ªãnh
    email: daotuanthinh@gmail.com
""")

st.sidebar.write("""#### üü° Gi√°o vi√™n h∆∞·ªõng d·∫´n: 
    C√¥ Khu·∫•t Thu·ª≥ Ph∆∞∆°ng""")

current_time = datetime.now()
st.sidebar.write(f"""#### üóìÔ∏è Th·ªùi gian b√°o c√°o:
    {current_time.strftime('%d-%m-%Y %H:%M %Z')}""") 




# N·ªôi dung theo l·ª±a ch·ªçn menu
if choice == 'Business Objective':    
    st.subheader("Business Objective") 
    st.markdown("""
    X√¢y d·ª±ng h·ªá th·ªëng ki·ªÉm tra c·∫£m x√∫c c·ªßa ng∆∞·ªùi d√πng v·ªÅ c√¥ng ty, ph√¢n lo·∫°i ƒë√°nh gi√° l√† t√≠ch c·ª±c, ti√™u c·ª±c hay trung t√≠nh v√† so s√°nh hi·ªáu qu·∫£ c·ªßa c√°c m√¥ h√¨nh h·ªçc m√°y.
    üëà **Ch·ªçn ph·∫ßn kh√°c tr√™n thanh b√™n** ƒë·ªÉ xem chi ti·∫øt.
    ### H·ªá th·ªëng bao g·ªìm:
    - Ph√¢n t√≠ch c·∫£m x√∫c v·ªõi nhi·ªÅu m√¥ h√¨nh (Logistic Regression, Random Forest, LightGBM, XGBoost, Sentiment Model)
    - Ph√¢n c·ª•m th√¥ng tin
    """)
    try:
        image1 = Image.open("Sentiment_p1.png")
        image2 = Image.open("Clustering_p1.png")
        new_size = (400, 400)
        image1_resized = image1.resize(new_size)
        image2_resized = image2.resize(new_size)
        new_image = Image.new("RGB", (800, 400), (255, 255, 255))
        new_image.paste(image1_resized, (0, 0))
        new_image.paste(image2_resized, (400, 0))
        st.image(new_image, use_container_width=True, caption="Sentiment Analysis & Clustering")
    except:
        st.error("‚ùå L·ªói t·∫£i h√¨nh ·∫£nh.")

elif choice == 'Build Project':
    st.subheader("Build Project")
    st.markdown("##### 1. Chu·∫©n b·ªã d·ªØ li·ªáu")
    st.markdown("""
    - **ƒê·ªçc d·ªØ li·ªáu**: T·∫£i d·ªØ li·ªáu t·ª´ file Reviews.xlsx v√† Overview_Companies.xlsx.
    - **X·ª≠ l√Ω d·ªØ li·ªáu thi·∫øu**: Lo·∫°i b·ªè c√°c d√≤ng c√≥ gi√° tr·ªã `null` trong c√°c c·ªôt nh∆∞ `What I liked`, `Suggestions for improvement`.
    - **K·∫øt h·ª£p c·ªôt**: G·ªôp `What I liked` v√† `Suggestions for improvement` ƒë·ªÉ x·ª≠ l√Ω tr∆∞·ªõc khi hu·∫•n luy·ªán.
    """)
    try:
        file_review = 'Reviews.xlsx'
        file_overview_company = 'Overview_Companies.xlsx'
        review = pd.read_excel(file_review)
        overview_company = pd.read_excel(file_overview_company)
        review.rename(columns={'Recommend?': 'Recommend'}, inplace=True)
        overview_company = overview_company[['Company Name', 'Company Type', 'Company size', 'Country', 'Working days', 'Overtime Policy']]
        data = pd.merge(review, overview_company, on='Company Name')
        st.dataframe(data.head(3))
        st.dataframe(data.tail(3))
    except:
        st.error("‚ùå L·ªói t·∫£i d·ªØ li·ªáu.")
    # Kh√°m ph√° v√† ti·ªÅn x·ªß l√Ω d·ªØ li·ªáu
    st.markdown("##### 2. Kh√°m ph√° v√† Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu")
    st.markdown("""
    - Hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n: S·ªë l∆∞·ª£ng b·∫£n ghi, s·ªë l∆∞·ª£ng ƒë·∫∑c tr∆∞ng.
    - Ti·ªÅn x·ª≠ l√Ω vƒÉn b·∫£n:
        1. Lo·∫°i b·ªè s·ªë.
        2. Lo·∫°i b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát.
        3. Lo·∫°i b·ªè stop words.
    - Hi·ªÉn th·ªã WordCloud tr∆∞·ªõc v√† sau x·ª≠ l√Ω.
    """)
    try:
        st.write("##### WordCloud tr∆∞·ªõc x·ª≠ l√Ω")
        st.image("pre_processed_text.png", use_container_width=True)
        st.write("##### WordCloud sau x·ª≠ l√Ω")
        st.image("processed_text.png", use_container_width=True)
    except:
        st.error("‚ùå L·ªói t·∫£i h√¨nh ·∫£nh WordCloud.")
    # 3. ƒê√°nh gi√° c√°c thu·∫≠t to√°n
    st.markdown("##### 3. ƒê√°nh gi√° c√°c thu·∫≠t to√°n")
    st.markdown("""
    - **Danh s√°ch c√°c thu·∫≠t to√°n ƒë√£ tri·ªÉn khai**:
      - KNNBaseline
      - SVD (Singular Value Decomposition)
      - SVDpp (SVD++)
      - BaselineOnly
    - **Quy tr√¨nh ƒë√°nh gi√°**:
      - S·ª≠ d·ª•ng `cross_validate` v·ªõi c√°c ch·ªâ s·ªë RMSE v√† MAE ƒë·ªÉ ƒë√°nh gi√° c√°c thu·∫≠t to√°n tr√™n 5 l·∫ßn g·∫≠p (5-fold cross-validation).
      - Ghi l·∫°i th·ªùi gian hu·∫•n luy·ªán v√† k·∫øt qu·∫£ ƒë√°nh gi√° (RMSE, MAE).
      - K·∫øt qu·∫£ ƒë∆∞·ª£c l∆∞u v√†o DataFrame `results_df` ƒë·ªÉ so s√°nh c√°c thu·∫≠t to√°n.
    """)
    st.image("B·∫£ngƒë√°nhgi√°thu·∫≠tto√°n.png", caption="B·∫£ng ƒë√°nh gi√° thu·∫≠t to√°n", use_container_width=True)









elif choice == 'Sentiment Analysis & Clustering':
    st.subheader("Sentitment Analysis & Clustering")
    
    # Load model
    models_Logistic = joblib.load("modles/logistic_model.pkl")
    models_RandomForest = joblib.load("modles/random_forest_model.pkl")
    models_LightGBM = joblib.load("modles/LightGBM_model.pkl")
    models_XGBoost = joblib.load("modles/xgboost_model.pkl")

    # Models
    models = {
        "Logistic Regression": models_Logistic,
        "Random Forest": models_RandomForest,
        "LightGBM": models_LightGBM,
        "XGBoost": models_XGBoost
    }


    # L·ª±a ch·ªçn m√¥ h√¨nh
    selected_model = st.radio(
        "Ch·ªçn m√¥ h√¨nh ƒë·ªÉ ph√¢n t√≠ch:",
        options=[m for m in models.keys()],
        key="model_selection",
        horizontal=True
    )

    # Ch·ªçn C√¥ng ty
    st.write('### Ch·ªçn C√¥ng ty')
    company_name = [""] + data["Company Name"].dropna().unique().tolist()
    select_company_name = st.selectbox("Ch·ªçn C√¥ng ty", company_name)
    select_company_id = None
    if select_company_name:
        select_company_id = data[data["Company Name"] == select_company_name]['id'].values[0]

    # Nh·∫≠p ƒë√°nh gi√°
    st.write("### B∆∞·ªõc 1: Ch·ªçn ƒëi·ªÉm s·ªë (1-5)")
    salary_benefits = st.radio("üí∞ Salary_benefits", [1, 2, 3, 4, 5], horizontal=True, key="salary_benefits")
    training_learning = st.radio("üéì Training_learning", [1, 2, 3, 4, 5], horizontal=True, key="training_learning")
    management_cares = st.radio("ü§ù Management_cares", [1, 2, 3, 4, 5], horizontal=True, key="management_cares")
    culture_fun = st.radio("üéâ Culture_fun", [1, 2, 3, 4, 5], horizontal=True, key="culture_fun")
    office_workspace = st.radio("üè¢ Office_workspace", [1, 2, 3, 4, 5], horizontal=True, key="office_workspace")

    recommend = st.selectbox("B·∫°n c√≥ ƒë·ªÅ xu·∫•t c√¥ng ty n√†y kh√¥ng?", ["Yes", "No"], index=0, key="recommend")
    # Nh·∫≠p ƒë√°nh gi√°
    st.write("### B∆∞·ªõc 2: Vi·∫øt ƒë√°nh gi√° c·ªßa b·∫°n")
    review_text = st.text_area("üìù √ù ki·∫øn c·ªßa b·∫°n", "", key="review_text")
    
    # Chu·∫©n h√≥a ph·∫ßn review_text
    process_text = process_text(review_text)
    # ƒê·∫øm s·ªë c√¢u/c·ª•m t·ª´ t√≠ch c·ª±c v√† ti√™u c·ª±c
    pos_count, neg_count = count_pos_neg_words(review_text)

    # ƒê∆∞a feature v√†o m√¥ h√¨nh
    input_data = pd.DataFrame([{
         'word_count_positive': pos_count,
        'word_count_negative': neg_count,
        'Salary & benefits': salary_benefits,
        'Training & learning': training_learning,
        'Management cares about me': management_cares,
        'Culture & fun': culture_fun,
        'Office & workspace': office_workspace
}])
    # C√°c n√∫t ch·ª©c nƒÉng
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if st.button("üîç D·ª± ƒëo√°n c·∫£m x√∫c"):
            if selected_model == 'Random Forest':
                prediction = models_RandomForest.predict(input_data)[0]
            elif selected_model == 'Logistic Regression':
                prediction = models_Logistic.predict(input_data)[0]
            elif selected_model == 'LightGBM':
                prediction = models_LightGBM.predict(input_data)[0]
            else:
                prediction = models_XGBoost.predict(input_data)[0]
            labels = {0: "üò† Negative", 1: "üòê Neutral", 2: "üòä Possitive"}
            st.success(f"‚úÖ Sentiment predict ({selected_model}): **{labels[prediction]}**")
    # with col2:
    #     if st.button("üìä Ph√¢n c·ª•m ƒë√°nh gi√°"):
    #         features = np.array([[salary_benefits, training_learning, management_cares, culture_fun, office_workspace]])
    #         try:
    #             if kmeans_model is not None:
    #                 cluster_label = kmeans_model.predict(features)[0]
    #                 st.info(f"C√¥ng ty thu·ªôc **C·ª•m {cluster_label}** (d·ª±a tr√™n ƒëi·ªÉm s·ªë)")
    #             else:
    #                 st.error("‚ùå M√¥ h√¨nh ph√¢n c·ª•m kh√¥ng ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng.")
    #         except Exception as e:
    #             st.error(f"‚ùå L·ªói khi ph√¢n c·ª•m: {str(e)}")
    
    # with col3:
    #     if st.button("üíæ L∆∞u ƒë√°nh gi√°"):
    #         st.success("ƒê√°nh gi√° ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng! (gi·∫£ l·∫≠p)")
    
    # with col4:
    #     if st.button("üè¢ ƒê√°nh gi√° c√¥ng ty"):
    #         try:
    #             file_review = 'Reviews.xlsx'
    #             file_overview_company = 'Overview_Companies.xlsx'
    #             review = pd.read_excel(file_review)
    #             overview_company = pd.read_excel(file_overview_company)
    #             review.rename(columns={'Recommend?': 'Recommend'}, inplace=True)
    #             overview_company = overview_company[['Company Name', 'Company Type', 'Company size', 'Country', 'Working days', 'Overtime Policy']]
    #             data = pd.merge(review, overview_company, on='Company Name')
    #             st.write("**D·ªØ li·ªáu ƒë√°nh gi√° c√¥ng ty**:")
    #             st.dataframe(data.head())
    #         except Exception as e:
    #             st.error(f"‚ùå L·ªói t·∫£i d·ªØ li·ªáu c√¥ng ty: {str(e)}")